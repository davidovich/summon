# this is a sample summon config file
# see https://github.com/davidovich/summon#configuration
version: 1
aliases: {}
outputdir: ".summoned"

.base: &baseargs
  - echo
  - make
  - -f
  - /opsverseer/bootstrap/Makefile


# .availablecommands: &commands
#   make: [*baseargs, '{{template "parseArgs" 0 }}']
#   tk:
#     cmdArgs: [tk]
#     completion: '{{ run "COMP_LINE=''tk args'' tk" }}'

#   cobra-complete-v2:
#     completion: '{{ run '

flags:
  - --config-root: 'CONFIG_ROOT=.'
exec:
  invokers:

    bash -c:
      fake-make:
        cmdArgs: [echo env-a env-b env-c]
        help: simulate env call

    bash:
      make: *baseargs

      tk:
        cmdArgs: [tk]
        # tk uses the posener/complete library. Fake a completion call by
        # setting the COMP_LINE environment var.
        completion: '{{with $a := args | join " " }}{{printf "COMP_LINE=%s " $a | run }}{{end}}'

      kubectl: # kubectl 0.23.1 uses the newer cobra completion which will allow delegating completions
        cmdArgs: [kubectl]
        completion: '{{ join " " args | run "kubectl" "__complete" }}'

      hello-bash: ['{{ summon "hello.sh" }}']

      manifest:
        help: 'render kubernetes manifests in build dir'
        cmdArgs: [*baseargs, 'manifests/{{arg 0 "manifest"}}','{{ template "parseArgs" 1 }}']
        completion: '{{ run "fake-make" "list-environments" }}'

      build:
        help: 'build components'
        cmdArgs: &build [*baseargs, 'build/{{arg 0 "build"}}','{{ flag "--config-root" }}']
        args:
          image:
              cmdArgs: [*baseargs, 'build/image/{{arg 0 "build image"}}']
              help: "build images in this repo"
              completion: '{{ run "make" "to-do-implement-image-list" }}'

          gitlab-ci.yaml:
              flags:
                --one-pipeline: '{{ if eq . "true"}} PARENT_CHILD=0 {{ else }} PARENT_CHILD=1'
              cmdArgs: [*build, '{{ flag "--one-pipeline" }}']
              help: "Initialize or merge gitlab-ci.yaml"

    docker run -v {{ env "PWD" }}:/mounted-app alpine:
      list: [ls, /mounted-app]
